#!/usr/bin/env ruby

# ---
# bin/humidity_control -- Ruby "executable" for monitoring humidity sensors
# ---
require_relative '../lib/humidity_control'

options = {}
OptionParser.new do |opts|
  opts.banner = "\n"
  opts.banner << "#{VERSION_INFO}\n\n"
  opts.banner << '  Usage: humidity_control [options]'

  options[:format] = 'text'
  opts.on('-v', '--version', 'Display the version of the program') do
    puts VERSION_INFO
    exit
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    puts "\n  Configuration:"
    puts '    - (1) file as specified by environment variable HUMIDITY_CONTROL_CONFIG_FILE,'
    puts '    - (2) /data/.config.'
    exit
  end
end.parse!

config = Config.new
sensor = Sensor.new(config: config)

loop do
  message = 'Feuchtigkeitssensor '
  begin
    sensor.read
  rescue StandardError => errormsg
    message << 'konnte NICHT gelesen werden! '
    LOGGER.warn errormsg
  end
  message << "#{sensor.type} ist »#{sensor.reading}« "
  message << "und läuft seit #{beautify sensor.uptime}. "
  message << "Der Sensor ist erreichbar unter #{config.sensor_url_external}. "
  message << "Das Programm #{$PROGRAM_NAME} hat #{sensor.warnings} Warnung(en)."
  LOGGER.info message
  unless sensor.reading == ''
    if sensor.reading == 'unknown'
      Alert.new(message: message, level: :info, config: config)
    else
      Alert.new(message: 'Wasser ist im Heizungskeller', level: :alarm, config: config) unless sensor.reading == 'dry'
    end
  end
  Alert.new(message: message, level: :info, config: config) if sensor.ready_for_status_update?
  sleep 15
end
